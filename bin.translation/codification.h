//
//  codification.h
//  Stack_proc
//
//  Created by Григорий Чирков on 26.03.15.
//  Copyright (c) 2015 Григорий Чирков. All rights reserved.
//

#ifndef Stack_proc_codification_h
#define Stack_proc_codification_h


enum OP {WRONGOP = 0, END = 101, ADD, SUB,
    DIV, MUL, RET, PUSHAX, PUSHBX,
    PUSHCX, PUSHDX, POPAX, POPBX, POPCX,
    POPDX, PUSH, JE = 116, JNE, JA, JAE, JB, JBE, JMP, CALL = 123};

class operation
{
public:
    operation(OP op);
    ~operation();
    size_t printop(FILE* dest, uint32_t mark);
private:
    size_t size;
    OP op;
    uint8_t* instr;
};

const uint8_t exitinst[] = {0xb8, 0x01, 0x00, 0x00, 0x02, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc3};

const uint8_t addinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x58, 0x45, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x00};

const uint8_t divinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x5e, 0x45, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x00};

const uint8_t subinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x5c, 0x45, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x00};

const uint8_t mulinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x59, 0x45, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x00};

const uint8_t pushaxinst[] = {0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x11, 0x4d, 0x00};

const uint8_t pushbxinst[] = {0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x11, 0x55, 0x00};

const uint8_t pushcxinst[] = {0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x11, 0x5d, 0x00};

const uint8_t pushdxinst[] = {0x48, 0x83, 0xc5, 0x08, 0xf2, 0x0f, 0x11, 0x65, 0x00};

const uint8_t popaxinst[] = {0xf2, 0x0f, 0x10, 0x4d, 0x00, 0x48, 0x83, 0xed, 0x08};

const uint8_t popbxinst[] = {0xf2, 0x0f, 0x10, 0x55, 0x00, 0x48, 0x83, 0xed, 0x08};

const uint8_t popcxinst[] = {0xf2, 0x0f, 0x10, 0x5d, 0x00, 0x48, 0x83, 0xed, 0x08};

const uint8_t popdxinst[] = {0xf2, 0x0f, 0x10, 0x65, 0x00, 0x48, 0x83, 0xed, 0x08};

const uint8_t retinst[] = {0xc3};

const uint8_t pushinst[] = {0x48, 0x83, 0xc5, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x01, 0x49, 0x83, 0xc1, 0x08, 0xf2, 0x0f, 0x11, 0x45, 0x00};

//next instructions are not full
//in the end - offset of jump instruction in instr segment

const uint8_t callinst[] = {0x41, 0xff, 0x52};

const uint8_t jmpinst[] = {0x41, 0xff, 0xa2};

const uint8_t jeinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xed, 0x10, 0x66, 0x0f, 0x2f, 0x45, 0x08, 0x75, 0x04, 0x41, 0xff, 0xa2};

const uint8_t jneinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xed, 0x10, 0x66, 0x0f, 0x2f, 0x45, 0x08, 0x74, 0x04, 0x41, 0xff, 0xa2};

const uint8_t jainst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xed, 0x10, 0x66, 0x0f, 0x2f, 0x45, 0x08, 0x76, 0x04, 0x41, 0xff, 0xa2};

const uint8_t jaeinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xed, 0x10, 0x66, 0x0f, 0x2f, 0x45, 0x08, 0x72, 0x04, 0x41, 0xff, 0xa2};

const uint8_t jbinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xed, 0x10, 0x66, 0x0f, 0x2f, 0x45, 0x08, 0x73, 0x04, 0x41, 0xff, 0xa2};

const uint8_t jbeinst[] = {0xf2, 0x0f, 0x10, 0x45, 0x00, 0x48, 0x83, 0xed, 0x10, 0x66, 0x0f, 0x2f, 0x45, 0x08, 0x77, 0x04, 0x41, 0xff, 0xa2};

#endif

